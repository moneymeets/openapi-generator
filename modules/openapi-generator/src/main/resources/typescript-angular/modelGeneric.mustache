{{#tsImports}}
// prettier-ignore
// @ts-ignore
import { {{classname}}, modelFields{{classname}} } from '{{filename}}';
{{/tsImports}}
// prettier-ignore
// @ts-ignore
import { ModelFieldArray, ModelFieldboolean, ModelFieldnumber, ModelFieldObject, ModelFields, ModelFieldstring, removeAdditionalProperties } from '../../model-field';

{{^vars}}/* tslint:disable:no-empty-interface */{{/vars}}
export interface {{classname}}{{#allParents}}{{#-first}} extends {{/-first}}{{{.}}}{{^-last}}, {{/-last}}{{/allParents}} { {{>modelGenericAdditionalProperties}}
{{#vars}}
    {{#description}}
    /**
     * {{{description}}}
     */
    {{/description}}
    {{#isReadOnly}}readonly {{/isReadOnly}}{{{name}}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}{{^required}} | null{{/required}};
{{/vars}}
}{{>modelGenericEnums}}

export interface ModelFields{{classname}} extends ModelFields {
    {{#vars}}
    {{{name}}}: {{^isListContainer}}{{#isPrimitiveType}}ModelField{{{dataType}}}{{/isPrimitiveType}}{{^isPrimitiveType}}ModelFieldObject{{/isPrimitiveType}}{{/isListContainer}}{{#isListContainer}}ModelFieldArray{{/isListContainer}};
    {{/vars}}
}

export const modelFields{{classname}}: ModelFields{{classname}} = {
    {{#vars}}
    {{{name}}}:
    {{^isListContainer}}{{#isPrimitiveType}}new ModelField{{{dataType}}}('{{{name}}}', { required: {{required}}{{#isNumeric}}{{#minimum}}, minimum: {{minimum}}{{/minimum}}{{#maximum}}, maximum: {{maximum}}{{/maximum}}{{/isNumeric}}{{#isString}}{{#pattern}}, pattern: {{pattern}}{{/pattern}}{{#format}}, format: '{{format}}'{{/format}}{{#minLength}}, minLength: {{minLength}}{{/minLength}}{{#maxLength}}, maxLength: {{maxLength}}{{/maxLength}}{{/isString}} }){{/isPrimitiveType}}{{^isPrimitiveType}}new ModelFieldObject('{{{name}}}', { required: {{required}} }, modelFields{{{dataType}}}, false){{/isPrimitiveType}}{{/isListContainer}}
    {{#isListContainer}}{{#items.isPrimitiveType}}new ModelFieldArray('{{{name}}}', { required: {{required}}{{#minItems}}, minItems: {{minItems}}{{/minItems}}{{#maxItems}}, maxItems: {{maxItems}}{{/maxItems}} }, new ModelField{{{items.dataType}}}('{{{name}}}', { required: {{required}} })){{/items.isPrimitiveType}}{{^items.isPrimitiveType}}new ModelFieldArray('{{{name}}}', { required: true{{#minItems}}, minItems: {{minItems}}{{/minItems}}{{#maxItems}}, maxItems: {{maxItems}}{{/maxItems}} }, new ModelFieldObject('', { required: true }, modelFields{{{complexType}}}, false)){{/items.isPrimitiveType}}{{/isListContainer}},
    {{/vars}}
    {{#allParents}}...modelFields{{{.}}},{{/allParents}}
};

export function removeAdditionalPropertiesFrom{{classname}}(obj: {{classname}}): {{classname}} {
    return removeAdditionalProperties<{{classname}}>(obj, modelFields{{classname}});
}

export function removeAdditionalPropertiesFromPartial{{classname}}(obj: Partial<{{classname}}>) {
    return removeAdditionalProperties<Partial<{{classname}}>>(obj, modelFields{{classname}});
}

export function is{{classname}}(obj: any, constraints: ObjectConstraints): obj is {{classname}} {
    return !getValidationErrors{{classname}}(obj, constraints, false);
}

export function is{{classname}}Array(x: any, constraints: ArrayConstraints): x is Array<{{classname}}> {
    return !getValidationErrors{{classname}}Array(x, constraints);
}

export function getValidationErrors{{classname}}(obj: any, constraints: ObjectConstraints, isPartial: boolean) {
    const modelField = new ModelFieldObject('{{classname}}', constraints, modelFields{{classname}}, isPartial);
    return modelField.getValidationErrors(obj);
}

export function getValidationErrors{{classname}}Array(obj: any, constraints: ArrayConstraints) {
  const modelField = new ModelFieldArray('{{classname}}Array', constraints, new ModelFieldObject('{{classname}}', constraints, modelFields{{classname}}, false));
  return modelField.getValidationErrors(obj);
}
