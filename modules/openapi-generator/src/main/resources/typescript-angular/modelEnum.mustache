{{#stringEnums}}
export enum {{classname}} {
{{#allowableValues}}
{{#enumVars}}
    {{name}} = {{{value}}}{{^-last}},{{/-last}}
{{/enumVars}}
{{/allowableValues}}
};
{{/stringEnums}}
{{^stringEnums}}
export type {{classname}} = {{#allowableValues}}{{#enumVars}}{{{value}}}{{^-last}} | {{/-last}}{{/enumVars}}{{/allowableValues}};

export const {{classname}} = {
{{#allowableValues}}
{{#enumVars}}
    {{name}}: {{{value}}} as {{classname}}{{^-last}},{{/-last}}
{{/enumVars}}
{{/allowableValues}}
};
{{/stringEnums}}

export function removeAdditionalPropertiesFrom{{classname}}(obj: {{classname}}): {{classname}} {
    throw new Error('removeAdditionalPropertiesFrom{{classname}} is not implemented!');
}

export function removeAdditionalPropertiesFromPartial{{classname}}(obj: Partial<{{classname}}>) {
    throw new Error('removeAdditionalPropertiesFromPartial{{classname}} is not implemented!');
}

export function is{{classname}}(obj: any, constraints: ObjectConstraints): obj is {{classname}} {
    return !getValidationErrors{{classname}}(obj, constraints, false);
}

export function is{{classname}}Array(x: any, constraints: ArrayConstraints): x is Array<{{classname}}> {
    return !getValidationErrors{{classname}}Array(x, constraints);
}

export function getValidationErrors{{classname}}(obj: any, constraints: ObjectConstraints, isPartial: boolean) {
    // NOT IMPLEMENTED
    // Compiler should complain as soon as this code is generated since function parameters are unused.
    return null;
}

export function getValidationErrors{{classname}}Array(obj: any, constraints: ArrayConstraints) {
    // NOT IMPLEMENTED
    // Compiler should complain as soon as this code is generated since function parameters are unused.
    return null;
}
