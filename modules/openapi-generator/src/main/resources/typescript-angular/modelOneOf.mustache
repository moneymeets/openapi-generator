{{#hasImports}}
import {
    {{#imports}}
    {{{.}}},
    {{/imports}}
} from './';

{{/hasImports}}

{{#tsImports}}
import { is{{classname}}, {{classname}}, removeAdditionalPropertiesFrom{{classname}}, getValidationErrors{{classname}}, getValidationErrors{{classname}}Array } from '{{filename}}';
{{/tsImports}}
import { FieldValidationError } from '../../validation-errors';

/**
 * @type {{classname}}{{#description}}
 * {{{description}}}{{/description}}
 * @export
 */
export type {{classname}} = {{#oneOf}}{{{.}}}{{^-last}} | {{/-last}}{{/oneOf}};

export function removeAdditionalPropertiesFrom{{classname}}(obj: {{classname}}) {
    {{#oneOf}}
    if (is{{{.}}}(obj, { required: true })) {
        return removeAdditionalPropertiesFrom{{{.}}}(obj);
    }
    {{/oneOf}}
    return null;
}

export function is{{classname}}(obj: any, constraints: ObjectConstraints): obj is {{classname}} {
    return !getValidationErrors{{classname}}(obj, constraints, false);
}

export function is{{classname}}Array(x: any, constraints: ArrayConstraints): x is Array<{{classname}}> {
    return !getValidationErrors{{classname}}Array(x, constraints);
}

export function getValidationErrors{{classname}}(obj: any, constraints: ObjectConstraints, isPartial: boolean): FieldValidationError | null {
    const groupedErrors = [
        {{#oneOf}}getValidationErrors{{.}}(obj, constraints, isPartial){{^-last}},{{/-last}}
        {{/oneOf}}
    ];
    return groupedErrors.some(errorGroup => errorGroup === null) ? null : groupedErrors.find(errorGroup => errorGroup !== null) ?? null;
}

export function getValidationErrors{{classname}}Array(obj: any, constraints: ArrayConstraints) {
    const groupedErrors = [
        {{#oneOf}}getValidationErrors{{.}}Array(obj, constraints){{^-last}},{{/-last}}
        {{/oneOf}}
    ];
    return groupedErrors.some(errorGroup => errorGroup === null) ? null : groupedErrors.find(errorGroup => errorGroup !== null) ?? null;
}
