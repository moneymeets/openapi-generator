{{>licenseInfo}}
/* eslint-disable @typescript-eslint/no-magic-numbers, @typescript-eslint/no-unused-vars, @typescript-eslint/member-ordering */

import { Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpParameterCodec } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { of, throwError } from 'rxjs';
import { mergeMap } from 'rxjs/operators';

// prettier-ignore
// @ts-ignore
import { isnumber, isstring, isboolean, getValidationErrorsnumber, getValidationErrorsstring, getValidationErrorsboolean } from '../../primitive-types-checks';
// prettier-ignore
// @ts-ignore
import { getValidationErrorsnumberArray, getValidationErrorsstringArray, getValidationErrorsbooleanArray } from '../../model-field';
// prettier-ignore
// @ts-ignore
import { RequestBodyValidationError, RequestParameterValidationError, RequestQueryParameterValidationError, ResponseBodyValidationError, ResponseHttpStatusError } from '../../validation-errors';

{{#imports}}
// prettier-ignore
// @ts-ignore
import { {{classname}}, removeAdditionalPropertiesFrom{{classname}}, removeAdditionalPropertiesFromPartial{{classname}}, is{{classname}}, is{{classname}}Array, getValidationErrors{{classname}}, getValidationErrors{{classname}}Array } from '../model/models';
{{/imports}}

import { ApiConfig } from '../../api-config';
import { Configuration } from '../configuration';
{{#withInterfaces}}
import {
    {{classname}}Interface{{#useSingleRequestParameter}}{{#operations}}{{#operation}}{{#allParams.0}},
    {{#prefixParameterInterfaces}}{{classname}}{{/prefixParameterInterfaces}}{{operationIdCamelCase}}RequestParams{{/allParams.0}}{{/operation}}{{/operations}}{{/useSingleRequestParameter}}
} from './{{classFilename}}Interface';
{{/withInterfaces}}

{{#operations}}

{{^withInterfaces}}
{{#useSingleRequestParameter}}
{{#operation}}
{{#allParams.0}}
export interface {{#prefixParameterInterfaces}}{{classname}}{{/prefixParameterInterfaces}}{{operationIdCamelCase}}RequestParams {
{{#allParams}}
    {{#description}}/** {{description}} */
    {{/description}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{^required}} | null{{/required}};
{{/allParams}}
}

{{/allParams.0}}
{{/operation}}
{{/useSingleRequestParameter}}
{{/withInterfaces}}

{{#operation}}
export function {{nickname}}Url({{#pathParams}}{{paramName}}: {{dataType}} | '*'{{#hasMore}}, {{/hasMore}}{{/pathParams}}) {
    return {{#hasPathParams}}`{{{path}}}`{{/hasPathParams}}{{^hasPathParams}}'{{{path}}}'{{/hasPathParams}};
}

{{/operation}}

{{#description}}
/**
 * {{&description}}
 */
{{/description}}
{{^providedInRoot}}
@Injectable()
{{/providedInRoot}}
{{#providedInRoot}}
@Injectable({
  providedIn: 'root'
})
{{/providedInRoot}}
{{#withInterfaces}}
export class {{classname}} implements {{classname}}Interface {
{{/withInterfaces}}
{{^withInterfaces}}
export class {{classname}} {
{{/withInterfaces}}

    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            this.configuration.basePath = ApiConfig.apiUrls?.{{apiName}};
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }

{{#hasSomeFormParams}}
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }
{{/hasSomeFormParams}}

    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            {{#isQueryParamObjectFormatJson}}
            httpParams = httpParams.append(key, JSON.stringify(value));
            {{/isQueryParamObjectFormatJson}}
            {{^isQueryParamObjectFormatJson}}
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                throw Error("Not implemented! Please use iso date strings instead of Date objects for api calls.");
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}{{#isQueryParamObjectFormatDot}}.{{/isQueryParamObjectFormatDot}}{{#isQueryParamObjectFormatKey}}[{{/isQueryParamObjectFormatKey}}${k}{{#isQueryParamObjectFormatKey}}]{{/isQueryParamObjectFormatKey}}` : k));
            }
            {{/isQueryParamObjectFormatJson}}
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

{{#operation}}
    /**
{{#summary}}
     * {{summary}}
{{/summary}}
{{#notes}}
     * {{notes}}
{{/notes}}
     {{^useSingleRequestParameter}}
     {{#allParams}}
     * @param {{paramName}} {{description}}
     {{/allParams}}
     {{/useSingleRequestParameter}}
     {{#useSingleRequestParameter}}
     {{#allParams.0}}
     * @param requestParameters
     {{/allParams.0}}
     {{/useSingleRequestParameter}}
     {{#isDeprecated}}
     * @deprecated
     {{/isDeprecated}}
     */
    public {{nickname}}({{^useSingleRequestParameter}}{{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{#isBodyParam}}{{#isRestfulPartialUpdate}}Partial<{{{dataType}}}>{{/isRestfulPartialUpdate}}{{^isRestfulPartialUpdate}}{{{dataType}}}{{/isRestfulPartialUpdate}}{{/isBodyParam}}{{^isBodyParam}}{{{dataType}}}{{/isBodyParam}}{{#hasMore}}, {{/hasMore}}{{/allParams}}{{/useSingleRequestParameter}}{{#useSingleRequestParameter}}{{#allParams.0}}requestParameters: {{#prefixParameterInterfaces}}{{classname}}{{/prefixParameterInterfaces}}{{operationIdCamelCase}}RequestParams, {{/allParams.0}}{{/useSingleRequestParameter}}) {

{{#allParams}}
{{#useSingleRequestParameter}}
        const {{paramName}} = requestParameters.{{paramName}};
{{/useSingleRequestParameter}}
        const {{paramName}}ValidationErrors =
        {{#isListContainer}}
        getValidationErrors{{{baseType}}}Array({{paramName}}, { required: {{required}}, uniqueItems: {{uniqueItems}}{{#minItems}}, minItems: {{minItems}}{{/minItems}}{{#maxItems}}, maxItems: {{maxItems}}{{/maxItems}} }{{#items}}{{#isPrimitiveType}}, { required: {{required}}{{^isString}}{{^isBoolean}}, integer: {{isInteger}}{{#minimum}}, minimum: {{minimum}}{{/minimum}}{{#maximum}}, maximum: {{maximum}}{{/maximum}}{{/isBoolean}}{{/isString}}{{#isString}}{{#pattern}}, pattern: {{pattern}}{{/pattern}}{{#minLength}}, minLength: {{minLength}}{{/minLength}}{{#maxLength}}, maxLength: {{maxLength}}{{/maxLength}}{{/isString}}{{#dataFormat}}, format: '{{dataFormat}}'{{/dataFormat}} }{{/isPrimitiveType}}{{/items}});
        {{/isListContainer}}
        {{^isListContainer}}
        getValidationErrors{{^isEnum}}{{{dataType}}}{{/isEnum}}{{#isEnum}}{{#isString}}string{{/isString}}{{^isString}}number{{/isString}}{{/isEnum}}({{paramName}}, { required: {{required}}{{#isPrimitiveType}}{{^isString}}{{^isBoolean}}, integer: {{isInteger}}{{#minimum}}, minimum: {{minimum}}{{/minimum}}{{#maximum}}, maximum: {{maximum}}{{/maximum}}{{/isBoolean}}{{/isString}}{{#isString}}{{#pattern}}, pattern: {{pattern}}{{/pattern}}{{#minLength}}, minLength: {{minLength}}{{/minLength}}{{#maxLength}}, maxLength: {{maxLength}}{{/maxLength}}{{/isString}}{{#dataFormat}}, format: '{{dataFormat}}'{{/dataFormat}}{{/isPrimitiveType}} }{{^isPrimitiveType}}, {{^isBodyParam}}false{{/isBodyParam}}{{#isBodyParam}}{{^isRestfulPartialUpdate}}false{{/isRestfulPartialUpdate}}{{#isRestfulPartialUpdate}}true{{/isRestfulPartialUpdate}}{{/isBodyParam}}{{/isPrimitiveType}});
        {{/isListContainer}}
        if ({{paramName}}ValidationErrors) {
          return throwError(new {{#isQueryParam}}RequestQueryParameterValidationError{{/isQueryParam}}{{#isBodyParam}}RequestBodyValidationError{{/isBodyParam}}{{^isQueryParam}}{{^isBodyParam}}RequestParameterValidationError{{/isBodyParam}}{{/isQueryParam}}('{{classname}}.{{nickname}}', '{{paramName}}', {{paramName}}, {{paramName}}ValidationErrors));
        }
{{/allParams}}

{{#hasQueryParams}}
        let queryParameters = new HttpParams({encoder: this.encoder});
{{#queryParams}}
        {{#isListContainer}}
        if ({{paramName}}) {
        {{#isCollectionFormatMulti}}
            {{paramName}}.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters,
                  <any>element, '{{baseName}}');
            })
        {{/isCollectionFormatMulti}}
        {{^isCollectionFormatMulti}}
            queryParameters = this.addToHttpParams(queryParameters,
                {{paramName}}.join(COLLECTION_FORMATS['{{collectionFormat}}']), '{{baseName}}');
        {{/isCollectionFormatMulti}}
        }
        {{/isListContainer}}
        {{^isListContainer}}
        if ({{paramName}} !== undefined && {{paramName}} !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>{{paramName}}, '{{baseName}}');
        }
        {{/isListContainer}}
{{/queryParams}}

{{/hasQueryParams}}
        {{^headerParams}}{{^bodyParam}}const headers = this.defaultHeaders;{{/bodyParam}}{{/headerParams}}
{{#headerParams}}
        let headers = this.defaultHeaders;
        {{#isListContainer}}
        if ({{paramName}}) {
            headers = headers.set('{{baseName}}', {{paramName}}.join(COLLECTION_FORMATS['{{collectionFormat}}']));
        }
        {{/isListContainer}}
        {{^isListContainer}}
        if ({{paramName}} !== undefined && {{paramName}} !== null) {
            headers = headers.set('{{baseName}}', String({{paramName}}));
        }
        {{/isListContainer}}
{{/headerParams}}

{{#bodyParam}}
{{- duplicated below, don't forget to change}}
        // to determine the Content-Type header
        const consumes: string[] = [
            {{#consumes}}
            '{{{mediaType}}}'{{#hasMore}},{{/hasMore}}
            {{/consumes}}
        ];
{{/bodyParam}}
{{#hasFormParams}}
{{^bodyParam}}
        // to determine the Content-Type header
        const consumes: string[] = [
            {{#consumes}}
            '{{{mediaType}}}'{{#hasMore}},{{/hasMore}}
            {{/consumes}}
        ];
{{/bodyParam}}
{{/hasFormParams}}
{{#bodyParam}}
        {{^headerParams}}let headers = this.defaultHeaders;{{/headerParams}}
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
{{/bodyParam}}

{{#hasFormParams}}
        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any; };
        let useForm = false;
        let convertFormParamsToString = false;
{{#formParams}}
{{#isFile}}
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
{{/isFile}}
{{/formParams}}
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: this.encoder});
        }

{{#formParams}}
        {{#isListContainer}}
        if ({{paramName}}) {
        {{#isCollectionFormatMulti}}
            {{paramName}}.forEach((element) => {
                formParams = formParams.append('{{baseName}}', <any>element) as any || formParams;
            })
        {{/isCollectionFormatMulti}}
        {{^isCollectionFormatMulti}}
            if (useForm) {
                {{paramName}}.forEach((element) => {
                    formParams = formParams.append('{{baseName}}', <any>element) as any || formParams;
            })
            } else {
                formParams = formParams.append('{{baseName}}', {{paramName}}.join(COLLECTION_FORMATS['{{collectionFormat}}'])) as any || formParams;
            }
        {{/isCollectionFormatMulti}}
        }
        {{/isListContainer}}
        {{^isListContainer}}
        if ({{paramName}} !== undefined) {
            formParams = formParams.append('{{baseName}}', {{^isModel}}<any>{{paramName}}{{/isModel}}{{#isModel}}useForm ? new Blob([JSON.stringify({{paramName}})], {type: 'application/json'}) : <any>{{paramName}}{{/isModel}}) as any || formParams;
        }
        {{/isListContainer}}
{{/formParams}}

{{/hasFormParams}}
        return this.httpClient.{{httpMethod}}(`${this.configuration.basePath}${ {{nickname}}Url({{#pathParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/pathParams}})}`,{{#isBodyAllowed}}
            {{#bodyParam}}{{#required}}removeAdditionalPropertiesFrom{{#isBodyParam}}{{#isRestfulPartialUpdate}}Partial{{/isRestfulPartialUpdate}}{{/isBodyParam}}{{{dataType}}}({{paramName}}){{/required}}{{^required}}{{paramName}} ? removeAdditionalPropertiesFrom{{#isBodyParam}}{{#isRestfulPartialUpdate}}Partial{{/isRestfulPartialUpdate}}{{/isBodyParam}}{{{dataType}}}({{paramName}}) : null{{/required}}{{/bodyParam}}{{^bodyParam}}{{#hasFormParams}}convertFormParamsToString ? formParams.toString() : formParams{{/hasFormParams}}{{^hasFormParams}}null{{/hasFormParams}}{{/bodyParam}},{{/isBodyAllowed}}
            {
    {{#hasQueryParams}}
                params: queryParameters,
    {{/hasQueryParams}}
                headers,
                observe: 'response'
            }
        ).pipe(
            mergeMap(response => {
                const responseBody = response.body;
                switch (response.status) {
                {{#responses}}
                    {{^is4xx}}{{^is5xx}}
                    case {{code}}:
                    {{#dataType}}
                        return {{#isListContainer}}is{{{baseType}}}Array(responseBody, { required: true, uniqueItems: {{uniqueItems}}{{#minItems}}, minItems: {{minItems}}{{/minItems}}{{#maxItems}}, maxItems: {{maxItems}}{{/maxItems}} }{{#items}}{{#isPrimitiveType}}, { required: {{required}}{{#isNumeric}}, integer: {{isInteger}}{{#minimum}}, minimum: {{minimum}}{{/minimum}}{{#maximum}}, maximum: {{maximum}}{{/maximum}}{{/isNumeric}}{{#isString}}{{#pattern}}, pattern: {{pattern}}{{/pattern}}{{#minLength}}, minLength: {{minLength}}{{/minLength}}{{#maxLength}}, maxLength: {{maxLength}}{{/maxLength}}{{/isString}}{{#dataFormat}}, format: '{{dataFormat}}'{{/dataFormat}} }{{/isPrimitiveType}}{{/items}}){{/isListContainer}}{{^isListContainer}}is{{{dataType}}}(responseBody, { required: true{{#isPrimitiveType}}{{#isNumeric}}, integer: {{isInteger}}{{#minimum}}, minimum: {{minimum}}{{/minimum}}{{#maximum}}, maximum: {{maximum}}{{/maximum}}{{/isNumeric}}{{#isString}}{{#pattern}}, pattern: {{pattern}}{{/pattern}}{{#minLength}}, minLength: {{minLength}}{{/minLength}}{{#maxLength}}, maxLength: {{maxLength}}{{/maxLength}}{{/isString}}{{#dataFormat}}, format: '{{dataFormat}}'{{/dataFormat}}{{/isPrimitiveType}} }){{/isListContainer}}
                            ? of(responseBody)
                            : throwError(
                                new ResponseBodyValidationError(
                                  '{{classname}}.{{nickname}}',
                                  '{{#isListContainer}}Array<{{{baseType}}}>{{/isListContainer}}{{^isListContainer}}{{{dataType}}}{{/isListContainer}}',
                                  responseBody,
                                  {{#isListContainer}}getValidationErrors{{{baseType}}}Array(responseBody, { required: true, uniqueItems: {{uniqueItems}}{{#minItems}}, minItems: {{minItems}}{{/minItems}}{{#maxItems}}, maxItems: {{maxItems}}{{/maxItems}} }{{#items}}{{#isPrimitiveType}}, { required: {{required}}{{#isNumeric}}, integer: {{isInteger}}{{#minimum}}, minimum: {{minimum}}{{/minimum}}{{#maximum}}, maximum: {{maximum}}{{/maximum}}{{/isNumeric}}{{#isString}}{{#pattern}}, pattern: {{pattern}}{{/pattern}}{{#minLength}}, minLength: {{minLength}}{{/minLength}}{{#maxLength}}, maxLength: {{maxLength}}{{/maxLength}}{{/isString}}{{#dataFormat}}, format: '{{dataFormat}}'{{/dataFormat}} }{{/isPrimitiveType}}{{/items}}){{/isListContainer}}{{^isListContainer}}getValidationErrors{{{dataType}}}(responseBody, { required: true{{#isPrimitiveType}}{{#isNumeric}}{{#minimum}}, minimum: {{minimum}}{{/minimum}}{{#maximum}}, maximum: {{maximum}}{{/maximum}}{{/isNumeric}}{{#isString}}{{#pattern}}, pattern: {{pattern}}{{/pattern}}{{#minLength}}, minLength: {{minLength}}{{/minLength}}{{#maxLength}}, maxLength: {{maxLength}}{{/maxLength}}{{/isString}}{{#dataFormat}}, format: '{{dataFormat}}'{{/dataFormat}}{{/isPrimitiveType}} }{{^isPrimitiveType}}, false{{/isPrimitiveType}}){{/isListContainer}}
                                )
                              );
                    {{/dataType}}
                    {{^dataType}}
                        return of(responseBody);
                    {{/dataType}}
                    {{/is5xx}}{{/is4xx}}
                {{/responses}}
                }
                return throwError(new ResponseHttpStatusError('{{classname}}.{{nickname}}', response.status));
            })
        );
    }

{{/operation}}}
{{/operations}}
